name: Run Robot Framework tests
description: 'Runs Robot Framework tests via npm test'
branding:
  icon: 'fast-forward'
  color: 'purple'

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4

    - name: Set default values for environment variables
      shell: bash
      run: |
        echo "WOPEE_SCREENSHOT_VALIDATION_ENABLED=${WOPEE_SCREENSHOT_VALIDATION_ENABLED:-true}" >> $GITHUB_ENV
        echo "WOPEE_COLLECT_PAGE_CONTENT=${WOPEE_COLLECT_PAGE_CONTENT:-true}" >> $GITHUB_ENV

    - name: Load client_payload.env → $GITHUB_ENV
      if: github.event.client_payload.env
      shell: bash
      run: |
        jq -r '
          .client_payload.env
          | to_entries[]
          | select(.value != null)
          | if (.value | type=="string" and test("\n"))
              then "\(.key)<<EOF\n\(.value)\nEOF"
              else "\(.key)=\(.value)"
            end
        ' "$GITHUB_EVENT_PATH" >> "$GITHUB_ENV"

    - name: Load .github/workflows/.env → $GITHUB_ENV
      shell: bash
      run: |
        if [ -f .github/workflows/.env ]; then
          # Extract valid KEY=VALUE lines; if none are found, skip without failing the step
          grep -vE '^(#|$)' .github/workflows/.env | \
            grep -E '^[A-Za-z_][A-Za-z0-9_]*=' \
            >> "$GITHUB_ENV" || true
        fi

    - name: Run tests
      shell: bash
      run: |
        python3 -m venv --system-site-packages .venv && \
        source .venv/bin/activate && \
        pip install -r requirements.txt && \
        [ ! -e ".env" ] && cp .github/workflows/.env .env || echo ".env file already exists"
        make test

    - name: Confirm end of run
      if: always()
      shell: bash
      run: |

        ERROR_FLAG=false
        if [ "${{ job.status }}" = "failure" ]; then
          ERROR_FLAG=true
        fi

        if [ "${{ github.event.action }}" = "code" ]; then

          JSON_PAYLOAD=$(cat <<-EOF
          {
            "query": "mutation PostProcessAgentSuite(\$input: PostProcessAgentSuiteInput!) { postProcessAgentSuite(input: \$input) }",
            "variables": {
              "input": {
                "error": $ERROR_FLAG,
                "projectUuid": "${{ env.WOPEE_PROJECT_UUID }}",
                "suiteUuid": "${{ env.WOPEE_SUITE_UUID }}",
                "testCase": {
                  "testCaseId": "${{ env.WOPEE_TEST_CASE_ID }}",
                  "userStoryId": "${{ env.WOPEE_USER_STORY_ID }}"
                }
              }
            }
          }
        EOF
          )
        fi

        curl --request POST \
          --header 'content-type: application/json' \
          --header 'api_key: ${{ env.WOPEE_API_KEY }}' \
          --url '${{ env.WOPEE_API_URL }}' \
          --data "$JSON_PAYLOAD"
          
    - name: Set artifact timestamp
      shell: bash
      run: echo "ARTIFACT_TIMESTAMP=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        # use timestamp for artifact name
        name: robot-framework-results-${{ env.ARTIFACT_TIMESTAMP }}
        path: |
          reports/*
        retention-days: 1